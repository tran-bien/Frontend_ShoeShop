import React, { useEffect, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import {
  FaCheckCircle,
  FaTimesCircle,
  FaSpinner,
  FaHome,
  FaList,
  FaExclamationTriangle,
} from "react-icons/fa";
import {
  paymentService,
  VnpayCallbackParams,
} from "../../services/OrderServiceV2";

interface PaymentStatus {
  status: "loading" | "success" | "failed" | "error";
  orderId?: string;
  orderCode?: string;
  message?: string;
  transactionId?: string;
  amount?: string;
  errorDetails?: string;
  responseCode?: string; // Th√™m m√£ ph·∫£n h·ªìi ƒë·ªÉ ki·ªÉm tra
}

// H√†m ƒë·ªÉ l·∫•y th√¥ng b√°o l·ªói t·ª´ m√£ VNPAY
const getVnpayErrorMessage = (responseCode?: string | null): string => {
  if (!responseCode) return "L·ªói kh√¥ng x√°c ƒë·ªãnh";

  const errorMessages: Record<string, string> = {
    "00": "Giao d·ªãch th√†nh c√¥ng",
    "01": "Giao d·ªãch ƒë√£ t·ªìn t·∫°i",
    "02": "Merchant kh√¥ng h·ª£p l·ªá (ki·ªÉm tra l·∫°i vnp_TmnCode)",
    "03": "D·ªØ li·ªáu g·ª≠i sang kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng",
    "04": "Kh·ªüi t·∫°o GD kh√¥ng th√†nh c√¥ng do Website ƒëang b·ªã t·∫°m kh√≥a",
    "05": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u qu√° s·ªë l·∫ßn quy ƒë·ªãnh.",
    "06": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u",
    "07": "Giao d·ªãch b·ªã nghi ng·ªù gian l·∫≠n",
    "09": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng",
    "10": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn",
    "11": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n",
    "12": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a",
    "13": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u",
    "24": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch",
    "51": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch",
    "65": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y",
    "75": "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨",
    "79": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh.",
    "99": "L·ªói kh√¥ng x√°c ƒë·ªãnh",
  };

  return (
    errorMessages[responseCode] || `L·ªói kh√¥ng x√°c ƒë·ªãnh (m√£: ${responseCode})`
  );
};

const PaymentStatusPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [paymentStatus, setPaymentStatus] = useState<PaymentStatus>({
    status: "loading",
  });

  useEffect(() => {
    const processPaymentCallback = async () => {
      const queryParams = new URLSearchParams(location.search);
      const currentPath = location.pathname;

      // C√°c tham s·ªë t·ª´ VNPAY
      const responseCode = queryParams.get("vnp_ResponseCode");
      const transactionStatus = queryParams.get("vnp_TransactionStatus");
      const transactionId =
        queryParams.get("vnp_TransactionNo") || queryParams.get("vnp_TxnRef");
      const amount = queryParams.get("vnp_Amount");
      const orderInfo = queryParams.get("vnp_OrderInfo");

      // C√°c tham s·ªë b·ªï sung t·ª´ backend redirect
      const orderId = queryParams.get("orderId");
      const orderCode = queryParams.get("orderCode");
      const status = queryParams.get("status");
      const message = queryParams.get("message");

      console.log("Payment callback params:", {
        currentPath,
        responseCode,
        transactionStatus,
        orderId,
        orderCode,
        message,
        status,
        transactionId,
        amount,
        orderInfo,
      });

      // CASE 1: Backend ƒë√£ x·ª≠ l√Ω v√† redirect v·ªÅ /payment/result v·ªõi status/message
      if (currentPath.includes("/payment/result") && status && message) {
        console.log("üîÑ X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ backend redirect...");

        if (status === "success") {
          setPaymentStatus({
            status: "success",
            orderId: orderId || undefined,
            orderCode: orderCode || undefined,
            message: message,
            transactionId: transactionId || undefined,
            amount: amount
              ? (parseInt(amount) / 100).toLocaleString()
              : undefined,
          });
        } else {
          setPaymentStatus({
            status: "failed",
            orderId: orderId || undefined,
            orderCode: orderCode || undefined,
            message: message,
            transactionId: transactionId || undefined,
          });
        }
        return;
      }

      // CASE 2: VNPAY redirect tr·ª±c ti·∫øp v·ªÅ /payment/status v·ªõi params VNPAY
      if (currentPath.includes("/payment/status") && responseCode) {
        console.log("üîÑ X·ª≠ l√Ω callback VNPAY tr·ª±c ti·∫øp...");

        // Hi·ªÉn th·ªã k·∫øt qu·∫£ ngay l·∫≠p t·ª©c d·ª±a tr√™n responseCode t·ª´ VNPAY
        const isSuccessfulVnpayResponse = responseCode === "00";

        if (isSuccessfulVnpayResponse) {
          // Hi·ªÉn th·ªã th√†nh c√¥ng ngay l·∫≠p t·ª©c
          setPaymentStatus({
            status: "success",
            message: "Thanh to√°n th√†nh c√¥ng",
            transactionId: transactionId || undefined,
            amount: amount
              ? (parseInt(amount) / 100).toLocaleString()
              : undefined,
            responseCode: responseCode,
          });
        } else {
          // Hi·ªÉn th·ªã th·∫•t b·∫°i ngay l·∫≠p t·ª©c
          setPaymentStatus({
            status: "failed",
            message: getVnpayErrorMessage(responseCode),
            transactionId: transactionId || undefined,
            responseCode: responseCode,
          });
        }

        // G·ªçi API backend ƒë·ªÉ c·∫≠p nh·∫≠t DB trong background (kh√¥ng ch·ªù k·∫øt qu·∫£)
        try {
          const vnpayParams: Partial<VnpayCallbackParams> = {};
          queryParams.forEach((value, key) => {
            if (key.startsWith("vnp_")) {
              (vnpayParams as any)[key] = value;
            }
          });

          if (vnpayParams.vnp_TxnRef && vnpayParams.vnp_ResponseCode) {
            // G·ªçi API trong background ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu
            paymentService
              .vnpayCallback(vnpayParams as VnpayCallbackParams)
              .then((response) => {
                console.log("‚úÖ Backend ƒë√£ c·∫≠p nh·∫≠t DB:", response);

                // C·∫≠p nh·∫≠t th√¥ng tin b·ªï sung n·∫øu c√≥
                if (
                  response.data.data?.orderId ||
                  response.data.data?.orderCode
                ) {
                  setPaymentStatus((prev) => ({
                    ...prev,
                    orderId: response.data.data?.orderId || prev.orderId,
                    orderCode: response.data.data?.orderCode || prev.orderCode,
                  }));
                }
              })
              .catch((error) => {
                console.warn(
                  "‚ö†Ô∏è L·ªói khi ƒë·ªìng b·ªô DB (kh√¥ng ·∫£nh h∆∞·ªüng UX):",
                  error
                );
              });
          }
        } catch (error) {
          console.warn(
            "‚ö†Ô∏è L·ªói khi chu·∫©n b·ªã params cho API (kh√¥ng ·∫£nh h∆∞·ªüng UX):",
            error
          );
        }

        return;
      }

      // CASE 3: Truy c·∫≠p tr·ª±c ti·∫øp ho·∫∑c kh√¥ng c√≥ params h·ª£p l·ªá
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n h·ª£p l·ªá");
      setPaymentStatus({
        status: "error",
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n",
        errorDetails: "Vui l√≤ng th·ª±c hi·ªán thanh to√°n t·ª´ trang ƒë·∫∑t h√†ng.",
      });
    };

    // Ch·ªâ set timeout cho c√°c tr∆∞·ªùng h·ª£p th·ª±c s·ª± c·∫ßn thi·∫øt
    const timeout = setTimeout(() => {
      setPaymentStatus((prev) => {
        // Ch·ªâ hi·ªÉn th·ªã timeout error n·∫øu v·∫´n ƒëang loading v√† ch∆∞a c√≥ k·∫øt qu·∫£ r√µ r√†ng
        if (prev.status === "loading" && !prev.responseCode) {
          console.log("‚è∞ Timeout - hi·ªÉn th·ªã th√¥ng b√°o l·ªói");
          return {
            status: "error",
            message: "Timeout - Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ thanh to√°n",
            errorDetails:
              "Vui l√≤ng ki·ªÉm tra l·∫°i tr·∫°ng th√°i ƒë∆°n h√†ng trong danh s√°ch ƒë∆°n h√†ng c·ªßa b·∫°n.",
          };
        }
        // Gi·ªØ nguy√™n tr·∫°ng th√°i hi·ªán t·∫°i n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£
        return prev;
      });
    }, 2000);

    processPaymentCallback();
    return () => clearTimeout(timeout);
  }, [location.search, location.pathname]);

  const renderContent = () => {
    switch (paymentStatus.status) {
      case "loading":
        return (
          <div className="text-center py-12">
            <FaSpinner className="animate-spin text-6xl text-blue-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-700 mb-2">
              ƒêang x·ª≠ l√Ω thanh to√°n...
            </h2>
            <p className="text-gray-500">Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</p>
            <div className="mt-4 text-sm text-gray-400">
              <p>ƒêang x√°c th·ª±c k·∫øt qu·∫£ thanh to√°n v·ªõi VNPAY...</p>
              <p>ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng...</p>
              {paymentStatus.responseCode === "00" && (
                <p className="text-green-500 font-medium mt-2">
                  M√£ ph·∫£n h·ªìi t·ª´ VNPAY cho th·∫•y giao d·ªãch ƒë√£ th√†nh c√¥ng! ƒêang
                  c·∫≠p nh·∫≠t d·ªØ li·ªáu...
                </p>
              )}
            </div>
          </div>
        );

      case "success":
        return (
          <div className="text-center py-12">
            <FaCheckCircle className="text-6xl text-green-500 mx-auto mb-4" />
            <h2 className="text-3xl font-bold text-green-600 mb-4">
              Thanh to√°n th√†nh c√¥ng!
            </h2>
            <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6 max-w-md mx-auto">
              <p className="text-green-700 mb-2">
                <strong>Th√¥ng b√°o:</strong> {paymentStatus.message}
              </p>
              {paymentStatus.orderCode && (
                <p className="text-gray-600 text-sm mb-1">
                  <strong>M√£ ƒë∆°n h√†ng:</strong> {paymentStatus.orderCode}
                </p>
              )}
              {paymentStatus.transactionId && (
                <p className="text-gray-600 text-sm mb-1">
                  <strong>M√£ giao d·ªãch:</strong> {paymentStatus.transactionId}
                </p>
              )}
              {paymentStatus.amount && (
                <p className="text-gray-600 text-sm">
                  <strong>S·ªë ti·ªÅn:</strong> {paymentStatus.amount} VNƒê
                </p>
              )}
            </div>
            <p className="text-gray-600 mb-6">
              C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang
              ƒë∆∞·ª£c x·ª≠ l√Ω.
            </p>
          </div>
        );

      case "failed":
        return (
          <div className="text-center py-12">
            <FaTimesCircle className="text-6xl text-red-500 mx-auto mb-4" />
            <h2 className="text-3xl font-bold text-red-600 mb-4">
              Thanh to√°n th·∫•t b·∫°i!
            </h2>
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-6 max-w-md mx-auto">
              <p className="text-red-700 mb-2">
                <strong>L√Ω do:</strong> {paymentStatus.message}
              </p>
              {paymentStatus.orderCode && (
                <p className="text-gray-600 text-sm mb-1">
                  <strong>M√£ ƒë∆°n h√†ng:</strong> {paymentStatus.orderCode}
                </p>
              )}
              {paymentStatus.transactionId && (
                <p className="text-gray-600 text-sm">
                  <strong>M√£ giao d·ªãch:</strong> {paymentStatus.transactionId}
                </p>
              )}
            </div>
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6 max-w-md mx-auto">
              <p className="text-orange-700 text-sm">
                ‚ÑπÔ∏è ƒê∆°n h√†ng v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n trong h·ªá th·ªëng
                <br />
                ‚ÑπÔ∏è B·∫°n c√≥ th·ªÉ th·ª≠ thanh to√°n l·∫°i trong danh s√°ch ƒë∆°n h√†ng
                <br />
                ‚ÑπÔ∏è T·ªìn kho ch∆∞a b·ªã tr·ª´ do thanh to√°n th·∫•t b·∫°i
              </p>
            </div>
            <p className="text-gray-600 mb-6">
              ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. B·∫°n c√≥ th·ªÉ th·ª≠ thanh
              to√°n l·∫°i trong danh s√°ch ƒë∆°n h√†ng.
            </p>
          </div>
        );

      case "error":
        return (
          <div className="text-center py-12">
            <FaExclamationTriangle className="text-6xl text-orange-500 mx-auto mb-4" />
            <h2 className="text-3xl font-bold text-orange-600 mb-4">
              C√≥ l·ªói x·∫£y ra!
            </h2>
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-6 mb-6 max-w-md mx-auto">
              <p className="text-orange-700 mb-2">
                <strong>Th√¥ng b√°o:</strong> {paymentStatus.message}
              </p>
              {paymentStatus.errorDetails && (
                <p className="text-gray-600 text-sm">
                  <strong>Chi ti·∫øt:</strong> {paymentStatus.errorDetails}
                </p>
              )}
              {paymentStatus.transactionId && (
                <p className="text-gray-600 text-sm mt-2">
                  <strong>M√£ giao d·ªãch:</strong> {paymentStatus.transactionId}
                </p>
              )}
            </div>
            <p className="text-gray-600 mb-6">
              Vui l√≤ng ki·ªÉm tra l·∫°i tr·∫°ng th√°i ƒë∆°n h√†ng ho·∫∑c li√™n h·ªá h·ªó tr·ª£
              kh√°ch h√†ng.
            </p>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
      <div className="max-w-2xl w-full bg-white rounded-lg shadow-lg">
        <div className="p-8">
          {renderContent()}

          {/* Action buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
            <Link
              to="/"
              className="inline-flex items-center justify-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
            >
              <FaHome className="mr-2" />
              V·ªÅ trang ch·ªß
            </Link>

            <Link
              to="/user-manage-order"
              className="inline-flex items-center justify-center px-6 py-3 bg-gray-600 text-white font-medium rounded-lg hover:bg-gray-700 transition-colors"
            >
              <FaList className="mr-2" />
              Xem ƒë∆°n h√†ng
            </Link>

            {paymentStatus.status === "failed" && (
              <button
                onClick={() => navigate("/cart")}
                className="inline-flex items-center justify-center px-6 py-3 bg-orange-600 text-white font-medium rounded-lg hover:bg-orange-700 transition-colors"
              >
                Quay l·∫°i gi·ªè h√†ng
              </button>
            )}

            {paymentStatus.status === "error" && (
              <button
                onClick={() => window.location.reload()}
                className="inline-flex items-center justify-center px-6 py-3 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition-colors"
              >
                Th·ª≠ l·∫°i
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentStatusPage;
